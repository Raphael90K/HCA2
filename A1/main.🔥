from python import Python
from tensor import Tensor
from complex import ComplexFloat32

fn main():
    var amp:amplitude = amplitude(16)
    var comp = List(ComplexFloat32(1,1), ComplexFloat32(2,2))
    amp.add_amplitudes(comp)
    print(amp.sums)


fn test() raises:
    Python.add_to_path("A1")
    var read_wave_file = Python.import_module("readwav")
    var output = read_wave_file.read_wave_file("./Audios/output.wav")

    var sample_rate = output[0]
    var data = output[1]

struct amplitude(Stringable):
    var sums: Tensor[DType.float32]
    var size: Int

    fn __init__(inout self, length: Int):
        self.sums = Tensor[DType.float32](length)
        self.size = length
    
    fn __str__(self) -> String:
        var s: String = "["
        for i in range(self.size):
            s += String(self.sums[i])
            s += ","
        s += "]"
        return s

    fn add_amplitudes(inout self, fft_result: List[ComplexFloat32]):
        print(len(fft_result))
        print(self.sums.shape())
        for i in range(self.size):
            self.sums[i] +=  fft_result[i].norm()



