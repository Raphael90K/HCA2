from python import Python, PythonObject
import sys
from A1.fft import fft
from tensor import Tensor
from complex import ComplexFloat64
from time import now
from tensor import TensorShape

struct amplitude(Stringable):
    var sums: Tensor[DType.float64]
    var size: Int
    var avg_amp: Tensor[DType.float64]

    var audio_data: List[ComplexFloat64]
    var sample_rate: Float64
    var block_size: Int32
    var offset: Int32
    var num_blocks: Int32
    var num_samples: Int32

    fn __init__(inout self, length: Int, owned audio_data: List[ComplexFloat64], sample_rate: Float64, block_size: Int32, offset: Int32):
        self.sums = Tensor[DType.float64](length)
        self.size = length
        self.avg_amp = Tensor[DType.float64](length)

        self.audio_data = audio_data^
        self.sample_rate = sample_rate
        self.block_size = block_size
        self.offset = offset
        self.num_blocks = 0
        self.num_samples = len(self.audio_data)

    fn __str__(self) -> String:
        var s: String = "["
        for i in range(self.size):
            s += String(self.sums[i])
            s += ","
        s += "]"
        return s

    fn add_amplitudes(inout self, fft_result: List[ComplexFloat64]):
        for i in range(self.size):
            if i >= len(fft_result):
                break
            self.sums[i] += fft_result[i].norm()

    fn calc_avg(inout self):
        var blocks = self.num_blocks.cast[DType.float64]()
        for i in range(self.size):
            self.avg_amp[i] = self.sums[i] / blocks


    fn analyze_frequency_blocks(inout self) raises:

        var start_index: Int32 = 0

        while start_index + self.block_size <= self.num_samples:
            var end_index = start_index + self.block_size
            var block = get_audio_block(self.audio_data, start_index, end_index)
            var fft_result = fft(block)
            start_index += self.offset
            self.add_amplitudes(fft_result)
            self.num_blocks += 1

fn get_frequencies(block_size: Int32, sample_rate: Float64) raises -> PythonObject:
    var np = Python.import_module("numpy") 
    var inverse_sample_rate = 1 / sample_rate
    var freq_bins = np.fft.fftfreq(PythonObject(block_size), PythonObject(inverse_sample_rate))
    return freq_bins


fn ndarray_to_complexlist(input: PythonObject) raises -> List[ComplexFloat64]:
    var input_length: Float64 = int(len(input))
    var output: List[ComplexFloat64] = List[ComplexFloat64]()
    for i in range[Float64](input_length):
        output.append(ComplexFloat64(input[i].to_float64(), 0))
    return output


fn get_audio_block(data: List[ComplexFloat64], start: Int32, end: Int32) -> List[ComplexFloat64]:
    var result = List[ComplexFloat64]()
    for i in range(start, end):
        result.append(data[i])
    return result

fn apply_threshold(threshold: Int32, amp: amplitude, freq_bins: PythonObject) raises:
    for i in range(amp.size):
        if amp.avg_amp[i] > threshold.cast[DType.float64]():
            print("Freq: ", freq_bins[i], " : " , amp.avg_amp[i])

fn calculate(inout amp: amplitude, block_size: Int32 , threshold: Int32) raises -> Float64:
    var start = now()
    amp.analyze_frequency_blocks()
    var freq_bins = get_frequencies(Int32(block_size).cast[DType.float64](), amp.sample_rate)
    amp.calc_avg()
    apply_threshold(threshold, amp, freq_bins)
    var end = now()
    return (end - start) / 1_000_000_000

fn main() raises:
    var init = initiate()
    var filename = str(init[0])
    var block_size = init[1]
    var offset = init[2]
    var threshold = init[3]
    var batch_size = init[4]
    var sample_rate = init[5]
    var audio_input = init[6]
    var audio_data = ndarray_to_complexlist(audio_input)
    var amp = amplitude(int(block_size // 2),audio_data, sample_rate, block_size, Int32(offset))

    # Timer starten und Laufzeit messen
    var duration = calculate(amp, block_size, threshold)
    print("Sekunden: ", duration)

fn initiate() raises -> Tuple[StringRef, Int32, Int32, Int32, Int, Float64, PythonObject]:
    Python.add_to_path("./utils/")
    var builtins = Python.import_module("builtins")
    var readwav = Python.import_module("utils")
    var args = sys.argv()
    if len(args) < 5:
        print("input needed: filename block_size offset threshold [batch_size]")
        sys.exit()

    var filename = args[1]
    var block_size = Int32(atol(args[2]))
    var offset = Int32(atol(args[3]))
    var threshold = Int32(atol(args[4]))
    var batch_size = int(55296)
    if len(args) == 6:
        batch_size = int(args[5])

    var input = readwav.read_wave_file(filename)
    var sample_rate = input[0].to_float64()
    var data = input[1]

    return filename, block_size, offset, threshold, batch_size, sample_rate, data

##Freq:  0.0  :  1653013.3187315746
##Freq:  344.53125  :  1028409.9946478169
##Freq:  4134.375  :  1105446.8880711871
##2.5636866450000002