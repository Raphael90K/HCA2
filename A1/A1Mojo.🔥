from python import Python, PythonObject
import sys
from fft import fft
from tensor import Tensor
from amplitude import amplitude
from complex import ComplexFloat64
from time import now
from tensor import TensorShape


fn analyze_frequency_blocks(
    audio_data: List[ComplexFloat64],
    sample_rate: Float64,
    block_size: Int32,
    offset: Int32,
    inout amplitude: amplitude,
) raises -> Int32:

    var num_samples = len(audio_data)
    var num_blocks: Int32 = 0
    var start_index: Int32 = 0

    while start_index + block_size <= num_samples:
        var end_index = start_index + block_size
        var block = get_audio_block(audio_data, start_index, end_index)
        var fft_result = fft(block)
        start_index += offset
        amplitude.add_amplitudes(fft_result)
        num_blocks += 1

    return num_blocks

fn get_frequencies(block_size: Int32, sample_rate: Float64) raises -> PythonObject:
    var np = Python.import_module("numpy") 
    var inverse_sample_rate = 1 / sample_rate
    var freq_bins = np.fft.fftfreq(PythonObject(block_size), PythonObject(inverse_sample_rate))
    return freq_bins


fn ndarray_to_complexlist(input: PythonObject) raises -> List[ComplexFloat64]:
    var input_length: Float64 = int(len(input))
    var output: List[ComplexFloat64] = List[ComplexFloat64]()
    for i in range[Float64](input_length):
        output.append(ComplexFloat64(input[i].to_float64(), 0))
    return output


fn get_audio_block(
    data: List[ComplexFloat64], start: Int32, end: Int32
) -> List[ComplexFloat64]:
    var result = List[ComplexFloat64]()
    for i in range(start, end):
        result.append(data[i])
    return result

fn apply_threshold(threshold: Int32, amp: amplitude, freq_bins: PythonObject) raises:
    for i in range(amp.size):
        if amp.avg_amp[i] > threshold.cast[DType.float64]():
            print("Freq: ", freq_bins[i], " : " , amp.avg_amp[i])



fn main() raises:
    Python.add_to_path(".")
    var read_wave_file = Python.import_module("readwav")
    var input = read_wave_file.read_wave_file("./Audios/output.wav")
    var sample_rate = input[0].to_float64()
    var data_input = input[1]
    var data: List[ComplexFloat64] = ndarray_to_complexlist(data_input)
    var amp = amplitude(256 // 2)

    var start = now()
    var num_blocks: Int32 = analyze_frequency_blocks(
        data, sample_rate, 256, 10, amp
    )
    var freq_bins = get_frequencies(256, sample_rate)
    var avg = amp.calc_avg(num_blocks)
    apply_threshold(1000000, amp, freq_bins)
    var end = now()
    print((end-start) / 1_000_000_000)