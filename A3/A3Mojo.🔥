from python import Python, PythonObject
import sys
from fft import fft
from tensor import Tensor
from complex import ComplexFloat64
from time import now
from tensor import TensorShape
from algorithm import parallelize
from os import Atomic


struct ParallelFft(Stringable):
    var sums: Tensor[DType.float64]
    var size: Int32
    var avg_amp: Tensor[DType.float64]

    var audio_data: List[ComplexFloat64]
    var sample_rate: Float64
    var block_size: Int32
    var offset: Int32
    var num_blocks: Int
    var num_samples: Int32

    var freq_bins: PythonObject

    fn __init__(inout self, owned audio_data: List[ComplexFloat64], sample_rate: Float64, block_size: Int32, offset: Int32) raises:
        var threading = Python.import_module("multiprocessing")
        self.block_size = block_size
        self.size = (self.block_size // 2)

        self.sums = Tensor[DType.float64](self.block_size // 2)

        self.avg_amp = Tensor[DType.float64](self.size)

        self.audio_data = audio_data^
        self.sample_rate = sample_rate

        self.offset = offset

        self.num_samples = len(self.audio_data)
        self.num_blocks = int((self.num_samples - self.block_size) / offset)
        self.freq_bins = PythonObject()

    fn __str__(self) -> String:
        var s: String = "["
        for i in range(self.size):
            s += String(self.sums[i])
            s += ","
        s += "]"
        return s

    fn calc_avg(inout self):
        var blocks = Float64(self.num_blocks)
        for i in range(self.size):
            self.avg_amp[i] = self.sums[i] / blocks

    fn analyze_frequency_blocks(inout self) raises:

        @parameter
        fn calc_loop(block_num: Int):
            var start_index = block_num * self.offset
            var end_index = start_index + self.block_size
            var block = self.get_audio_block(start_index,end_index)
            var fft_result = fft(block)
            self.add_amplitudes(fft_result)
            
            
        parallelize[calc_loop](self.num_blocks, 32)

    fn get_frequencies(inout self) raises:
        var np = Python.import_module("numpy")
        var inverse_sample_rate = 1 / self.sample_rate
        self.freq_bins = np.fft.fftfreq(
            PythonObject(self.block_size), PythonObject(inverse_sample_rate)
        )

    fn apply_threshold(inout self, threshold: Int32) raises:
        for i in range(self.size):
            if self.avg_amp[i] > threshold.cast[DType.float64]():
                print("Freq: ", self.freq_bins[i], " : ", self.avg_amp[i])

    fn get_audio_block(borrowed self, start: Int32, end: Int32) -> List[ComplexFloat64]:
        var result = List[ComplexFloat64]()
        for i in range(start, end):
            result.append(self.audio_data[i])
        return result

    fn add_amplitudes(inout self, fft_result: List[ComplexFloat64]):
        
        for i in range(self.size):
            if i >= len(fft_result):
                break
            self.sums[i] += fft_result[i].norm()
           
    
fn ndarray_to_complexlist(input: PythonObject) raises -> List[ComplexFloat64]:
    var input_length: Float64 = int(len(input))
    var output: List[ComplexFloat64] = List[ComplexFloat64]()
    for i in range[Float64](input_length):
        output.append(ComplexFloat64(input[i].to_float64(), 0))
    return output

fn calculate(inout amp: ParallelFft, threshold: Int32) raises -> Float64:
    var start = now()
    amp.analyze_frequency_blocks()
    amp.get_frequencies()
    amp.calc_avg()
    amp.apply_threshold(threshold)
    var end = now()
    return (end - start) / 1_000_000_000

fn main() raises:
    var init = initiate()
    var filename = str(init[0])
    var block_size = init[1]
    var offset = init[2]
    var threshold = init[3]
    var batch_size = init[4]
    var sample_rate = init[5]
    var audio_input = init[6]
    var audio_data = ndarray_to_complexlist(audio_input)
    

    # Timer starten und Laufzeit messen
    var amp = ParallelFft(audio_data^, sample_rate, block_size, offset)
    var duration = calculate(amp, threshold)
    print("Sekunden: ", duration)

fn initiate() raises -> Tuple[StringRef, Int32, Int32, Int32, Int, Float64, PythonObject]:
    Python.add_to_path("./utils/")
    var builtins = Python.import_module("builtins")
    var readwav = Python.import_module("utils")
    var args = sys.argv()
    if len(args) < 5:
        print("input needed: filename block_size offset threshold [batch_size]")
        sys.exit()

    var filename = args[1]
    var block_size = Int32(atol(args[2]))
    var offset = Int32(atol(args[3]))
    var threshold = Int32(atol(args[4]))
    var batch_size = int(55296)
    if len(args) == 6:
        batch_size = int(args[5])

    var input = readwav.read_wave_file(filename)
    var sample_rate = input[0].to_float64()
    var data = input[1]

    return filename, block_size, offset, threshold, batch_size, sample_rate, data

